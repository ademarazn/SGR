package VIEW;

import Action.Desfazer;
import Action.Refazer;
import DAO.ClienteDAO;
import DAO.FuncionarioDAO;
import DAO.ItemPedidoDAO;
import DAO.PedidoDAO;
import DAO.ProdutoDAO;
import DOCUMENT.NumeroValidator;
import Entidade.Cliente;
import Entidade.Funcionario;
import Entidade.ItemPedido;
import Entidade.Pedido;
import Entidade.Produto;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DocumentFilter;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Ademar Zório Neto
 */
public class GerarPedido extends javax.swing.JDialog {

    private Cliente clienteSelecionado;
    private Pedido pedido;
    private UndoManager manager = new UndoManager();

    /**
     * Creates new form GerarPedido
     */
    public GerarPedido(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/ICON/sgr.png")).getImage());
        btNovoMouseClicked(null);
        ((AbstractDocument) txtComanda.getDocument()).setDocumentFilter(new NumeroValidator(10, txtComanda));
        setUndoableTextArea();
        txtObs.setLineWrap(true);
        addEventoTeclaAtalho();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        consultarCliente = new javax.swing.JDialog();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        cbFiltroCliente = new javax.swing.JComboBox<>();
        btConsultarCliente = new javax.swing.JButton();
        txtConsultaCliente = new JTextFieldPersonalizado.JCTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaCliente = new javax.swing.JTable();
        btSelecionar = new javax.swing.JButton();
        btCancelarCliente = new javax.swing.JButton();
        btIncluirCliente = new javax.swing.JButton();
        consultarProduto = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cbFiltroProduto = new javax.swing.JComboBox<>();
        txtConsultaProduto = new JTextFieldPersonalizado.JCTextField();
        btConsultarProduto = new javax.swing.JButton();
        btAddProduto = new javax.swing.JButton();
        btCancelarProduto = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        spnQtd = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaProduto = new javax.swing.JTable();
        confirmarGerente = new javax.swing.JDialog();
        txtLogin = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSenha = new javax.swing.JPasswordField();
        btConfirma = new javax.swing.JButton();
        btCancelar1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        btConsultarComanda = new javax.swing.JButton();
        btCliente = new javax.swing.JButton();
        txtComanda = new JTextFieldPersonalizado.JCTextField();
        btCancelar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaItemPedido = new javax.swing.JTable();
        btAdicionar = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        txtTotal = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        btAlterar = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();
        btGerar = new javax.swing.JButton();

        consultarCliente.setTitle("Consultar Cliente");
        consultarCliente.setResizable(false);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Consulta"));

        jLabel20.setText("Filtro");

        cbFiltroCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Nome", "CPF" }));

        btConsultarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_search_18pt.png"))); // NOI18N
        btConsultarCliente.setText("Consultar");
        btConsultarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btConsultarClienteMouseClicked(evt);
            }
        });

        txtConsultaCliente.setPlaceholder("Digite aqui para consultar");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFiltroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(txtConsultaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btConsultarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(cbFiltroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConsultaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConsultarCliente))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabelaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabelaCliente);

        btSelecionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_done_18pt.png"))); // NOI18N
        btSelecionar.setText("Selecionar");
        btSelecionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btSelecionarMouseClicked(evt);
            }
        });

        btCancelarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_cancel_18pt.png"))); // NOI18N
        btCancelarCliente.setText("Cancelar");
        btCancelarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCancelarClienteMouseClicked(evt);
            }
        });

        btIncluirCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_add_18pt.png"))); // NOI18N
        btIncluirCliente.setText("Cliente");
        btIncluirCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btIncluirClienteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btIncluirCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btCancelarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(10, 10, 10))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSelecionar)
                    .addComponent(btCancelarCliente)
                    .addComponent(btIncluirCliente))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout consultarClienteLayout = new javax.swing.GroupLayout(consultarCliente.getContentPane());
        consultarCliente.getContentPane().setLayout(consultarClienteLayout);
        consultarClienteLayout.setHorizontalGroup(
            consultarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        consultarClienteLayout.setVerticalGroup(
            consultarClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        consultarProduto.setTitle("Consultar Produto");
        consultarProduto.setResizable(false);
        consultarProduto.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                consultarProdutoWindowClosed(evt);
            }
        });

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Consulta"));

        jLabel17.setText("Filtro");

        cbFiltroProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Código", "Nome" }));

        txtConsultaProduto.setPlaceholder("Digite aqui para consultar");

        btConsultarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_search_18pt.png"))); // NOI18N
        btConsultarProduto.setText("Consultar");
        btConsultarProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btConsultarProdutoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFiltroProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(txtConsultaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btConsultarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cbFiltroProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConsultaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConsultarProduto))
                .addGap(10, 10, 10))
        );

        btAddProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_add_circle_18pt.png"))); // NOI18N
        btAddProduto.setText("Adicionar Produto ao Pedido");
        btAddProduto.setEnabled(false);
        btAddProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btAddProdutoMouseClicked(evt);
            }
        });

        btCancelarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_cancel_18pt.png"))); // NOI18N
        btCancelarProduto.setText("Cancelar");
        btCancelarProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCancelarProdutoMouseClicked(evt);
            }
        });

        jLabel6.setText("Quantidade");

        spnQtd.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        tabelaProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabelaProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabelaProdutoMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(tabelaProduto);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(btAddProduto)
                                .addGap(10, 10, 10)
                                .addComponent(btCancelarProduto))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spnQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAddProduto)
                    .addComponent(btCancelarProduto))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout consultarProdutoLayout = new javax.swing.GroupLayout(consultarProduto.getContentPane());
        consultarProduto.getContentPane().setLayout(consultarProdutoLayout);
        consultarProdutoLayout.setHorizontalGroup(
            consultarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        consultarProdutoLayout.setVerticalGroup(
            consultarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        confirmarGerente.setTitle("Confirmar Gerente");
        confirmarGerente.setResizable(false);

        txtLogin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLoginFocusGained(evt);
            }
        });
        txtLogin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLoginKeyPressed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Login");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Senha");

        txtSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSenhaFocusGained(evt);
            }
        });
        txtSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSenhaKeyPressed(evt);
            }
        });

        btConfirma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_done_18pt.png"))); // NOI18N
        btConfirma.setText("Confirmar");
        btConfirma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btConfirmaMouseClicked(evt);
            }
        });

        btCancelar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_cancel_18pt.png"))); // NOI18N
        btCancelar1.setText("Cancelar");
        btCancelar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCancelar1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout confirmarGerenteLayout = new javax.swing.GroupLayout(confirmarGerente.getContentPane());
        confirmarGerente.getContentPane().setLayout(confirmarGerenteLayout);
        confirmarGerenteLayout.setHorizontalGroup(
            confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmarGerenteLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(confirmarGerenteLayout.createSequentialGroup()
                        .addComponent(btCancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btConfirma, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(confirmarGerenteLayout.createSequentialGroup()
                        .addGroup(confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLogin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSenha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );
        confirmarGerenteLayout.setVerticalGroup(
            confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmarGerenteLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(10, 10, 10)
                .addGroup(confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(10, 10, 10)
                .addGroup(confirmarGerenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btConfirma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btCancelar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pedido");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Dados do Pedido"));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("*Comanda");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Observação");

        txtObs.setColumns(20);
        txtObs.setRows(5);
        jScrollPane1.setViewportView(txtObs);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("*Cliente");

        txtCliente.setEditable(false);
        txtCliente.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        btConsultarComanda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_search_18pt.png"))); // NOI18N
        btConsultarComanda.setText("Consultar");
        btConsultarComanda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btConsultarComandaMouseClicked(evt);
            }
        });

        btCliente.setFont(new java.awt.Font("Arial Black", 0, 11)); // NOI18N
        btCliente.setText("...");
        btCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btClienteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtComanda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btConsultarComanda)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCliente)
                        .addGap(10, 10, 10)
                        .addComponent(btCliente)))
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btConsultarComanda)
                    .addComponent(txtComanda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCliente))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_cancel_18pt.png"))); // NOI18N
        btCancelar.setText("Cancelar");
        btCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCancelarMouseClicked(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Itens do Pedido"));

        tabelaItemPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabelaItemPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabelaItemPedidoMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(tabelaItemPedido);

        btAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_add_circle_18pt.png"))); // NOI18N
        btAdicionar.setText("Adicionar Item");
        btAdicionar.setEnabled(false);
        btAdicionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btAdicionarMouseClicked(evt);
            }
        });

        btRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_remove_circle_18pt.png"))); // NOI18N
        btRemover.setText("Remover Item");
        btRemover.setEnabled(false);
        btRemover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btRemoverMouseClicked(evt);
            }
        });

        txtTotal.setEditable(false);
        txtTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0,0");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Total");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAdicionar)
                    .addComponent(btRemover)
                    .addComponent(jLabel13)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        btAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_update_18pt.png"))); // NOI18N
        btAlterar.setText("Alterar");
        btAlterar.setEnabled(false);
        btAlterar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btAlterarMouseClicked(evt);
            }
        });

        btNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_fiber_new_18pt.png"))); // NOI18N
        btNovo.setText("Novo");
        btNovo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btNovoMouseClicked(evt);
            }
        });

        btGerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICON/ic_check_circle_black_18dp.png"))); // NOI18N
        btGerar.setText("Gerar");
        btGerar.setAutoscrolls(true);
        btGerar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btGerarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btGerar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancelar)
                    .addComponent(btAlterar)
                    .addComponent(btNovo)
                    .addComponent(btGerar))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btConsultarComandaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btConsultarComandaMouseClicked
        if (!txtComanda.getText().isEmpty()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            pedido = new PedidoDAO().consultarPedidoAtivoPorComanda(Integer.parseInt(txtComanda.getText()));
            if (pedido != null) {
                limpar();
                txtComanda.setText(pedido.getComanda().toString());
                clienteSelecionado = pedido.getCliente();
                txtCliente.setText(pedido.getCliente().getNomeCliente());
                txtObs.setText(pedido.getObs());
                carregarTabelaItemPedido();
                btAdicionar.setEnabled(true);
                btRemover.setEnabled(false);
                btAlterar.setEnabled(true);
                btCliente.setEnabled(false);
                btGerar.setEnabled(false);
            } else {
                if (JOptionPane.showConfirmDialog((Frame) getParent(), "Nenhum pedido está em aberto para essa comanda\n"
                        + "Deseja abrir um novo pedido?", "Novo pedido", JOptionPane.YES_NO_OPTION) == 0) {
                    if (clienteSelecionado != null && !txtComanda.getText().isEmpty()) {
                        abrirPedido();
                    } else {
                        if (clienteSelecionado == null) {
                            txtCliente.setBackground(new Color(255, 155, 155));
                        }
                        if (txtComanda.getText().isEmpty()) {
                            txtComanda.setBackground(new Color(255, 155, 155));
                        }
                        JOptionPane.showMessageDialog((Frame) getParent(), "Preencha os campos em vermelho "
                                + "para abrir um novo pedido!");
                    }
                }
            }
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btConsultarComandaMouseClicked

    private void btClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btClienteMouseClicked
        if (btCliente.isEnabled()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            txtCliente.setBackground(new Color(255, 255, 255));
            Dimension d = new Dimension(514, 410);
            tabelaCliente.getParent().setBackground(new java.awt.Color(233, 232, 230));
            consultarCliente.setSize(d);
            consultarCliente.setPreferredSize(d);
            consultarCliente.setResizable(false);
            consultarCliente.setModal(true);
            consultarCliente.setLocationRelativeTo(null);
            cbFiltroCliente.setSelectedIndex(0);
            txtConsultaCliente.setText(null);

            tabelaCliente.setModel(new DefaultTableModel());
            String[] colunas = new String[]{"Código", "Nome", "CPF", "RG", "Dt. Nascimento",
                "Telefone", "Celular", "Email", "Endereço",
                "Número", "Bairro", "Complemento", "Cidade", "Estado", "CEP"};
            setModeloTabela(tabelaCliente, colunas);
            ClienteDAO clienteDAO = new ClienteDAO();
            List<Cliente> clientes = clienteDAO.consultarTudoOrdenado();
            carregarTabelaCliente(clientes);

            consultarCliente.setVisible(true);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btClienteMouseClicked

    private void tabelaItemPedidoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaItemPedidoMousePressed
        if (tabelaItemPedido.getSelectedRow() != -1 && !btRemover.isEnabled()) {
            btRemover.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaItemPedidoMousePressed

    private void btAdicionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAdicionarMouseClicked
        if (btAdicionar.isEnabled()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            Dimension d = new Dimension(514, 445);
            tabelaProduto.getParent().setBackground(new java.awt.Color(233, 232, 230));
            consultarProduto.setSize(d);
            consultarProduto.setPreferredSize(d);
            consultarProduto.setResizable(false);
            consultarProduto.setModal(true);
            consultarProduto.setLocationRelativeTo(null);
            cbFiltroProduto.setSelectedIndex(0);
            txtConsultaProduto.setText(null);
            spnQtd.setValue(1);

            tabelaProduto.setModel(new DefaultTableModel());
            ProdutoDAO produtoDAO = new ProdutoDAO();
            List<Produto> produtos = produtoDAO.consultarTudoOrdenado(true);
            carregarTabelaProduto(produtos);

            consultarProduto.setVisible(true);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btAdicionarMouseClicked

    private void btRemoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btRemoverMouseClicked
        if (btRemover.isEnabled()) {
            //            if (JOptionPane.showConfirmDialog((Frame)getParent(), "Deseja realmente remover o "
            //                    + "item do pedido?", "Remover item", 0) == 0) {
            txtLogin.setText(null);
            txtSenha.setText(null);
            confirmarGerente.setSize(228, 137);
            confirmarGerente.setModal(true);
            confirmarGerente.setLocationRelativeTo(null);
            confirmarGerente.setVisible(true);
            //            }
        }
    }//GEN-LAST:event_btRemoverMouseClicked

    private void btAlterarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAlterarMouseClicked
        if (btAlterar.isEnabled()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            PedidoDAO pedidoDAO = new PedidoDAO();
            pedido.setCliente(clienteSelecionado);
            pedido.setObs(txtObs.getText().trim());
            pedidoDAO.alterar(pedido);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btAlterarMouseClicked

    private void btNovoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btNovoMouseClicked
        limpar();
        clienteSelecionado = null;
        pedido = null;
        String[] colunas = new String[]{
            "Código", "Produto", "Quantidade", "Valor Unitário"
        };
        setModeloTabela(tabelaItemPedido, colunas);
        tabelaItemPedido.getColumnModel().getColumn(0).setPreferredWidth(73);
        tabelaItemPedido.getColumnModel().getColumn(1).setPreferredWidth(373);
        tabelaItemPedido.getColumnModel().getColumn(2).setPreferredWidth(100);
        tabelaItemPedido.getColumnModel().getColumn(3).setPreferredWidth(100);
        btAdicionar.setEnabled(false);
        btRemover.setEnabled(false);
        btAlterar.setEnabled(false);
        btCliente.setEnabled(true);
        btGerar.setEnabled(true);
    }//GEN-LAST:event_btNovoMouseClicked

    private void btConsultarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btConsultarClienteMouseClicked
        consultarCliente();
    }//GEN-LAST:event_btConsultarClienteMouseClicked

    private void btSelecionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSelecionarMouseClicked
        if (tabelaCliente.getSelectedRow() != -1) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            int linha = tabelaCliente.getSelectedRow();
            clienteSelecionado = (Cliente) new ClienteDAO()
                    .consultarPorCpf(tabelaCliente
                            .getModel()
                            .getValueAt(linha, 2)
                            .toString());

            txtCliente.setText(tabelaCliente.getModel().getValueAt(linha, 1).toString());

            consultarCliente.dispose();
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } else {
            JOptionPane.showMessageDialog((Frame) getParent(), "Selecione um cliente na tabela"
                    + " antes de pressionar o botão!",
                    "Mensagem", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btSelecionarMouseClicked

    private void btCancelarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCancelarClienteMouseClicked
        consultarCliente.dispose();
    }//GEN-LAST:event_btCancelarClienteMouseClicked

    private void btIncluirClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btIncluirClienteMouseClicked
        CadCliente cliente = new CadCliente((Frame) getParent(), true);
        cliente.setVisible(true);
    }//GEN-LAST:event_btIncluirClienteMouseClicked

    private void btConsultarProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btConsultarProdutoMouseClicked
        consultarProduto();
    }//GEN-LAST:event_btConsultarProdutoMouseClicked

    private void btAddProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAddProdutoMouseClicked
        if (btAddProduto.isEnabled()) {
            int linha = tabelaProduto.getSelectedRow();
            if (JOptionPane.showConfirmDialog((Frame) getParent(), "Deseja realmente adicionar o "
                    + "item no pedido?", "Adicionar item", 0) == 0) {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                List<ItemPedido> itensPedido = new ItemPedidoDAO().consultarPorPedido(pedido.getPkPedido());
                int codProduto = Integer.parseInt(tabelaProduto
                        .getValueAt(linha, 0).toString());
                ItemPedido itemPedido = null;
                for (ItemPedido item : itensPedido) {
                    if (item.getProduto().getPkProduto() == codProduto) {
                        itemPedido = item;
                    }
                }
                if (itemPedido != null) { // já existe, então atualiza a quantidade do item
                    itemPedido.setQtdProduto(
                            itemPedido.getQtdProduto()
                            + Integer.parseInt(
                                    spnQtd.getValue().toString()));
                    try {
                        new ItemPedidoDAO().alterar(itemPedido);
                        carregarTabelaItemPedido();
                        btAddProduto.setEnabled(false);
                        JOptionPane.showMessageDialog((Frame) getParent(), "Item adicionado com sucesso!");
                        consultarProduto.dispose();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível adicionar o item no pedido!\n"
                                + "<html><b>" + e.getClass() + "</html></b>"
                                + "\nContate o desenvolvedor!", "Erro ao adicionar item", JOptionPane.ERROR_MESSAGE);
                    }
                } else { // não existe o produto no pedido, então adiciona um novo item
                    itemPedido = new ItemPedido();
                    Produto produto = new ProdutoDAO()
                            .consultarPorCodigo(codProduto, true);
                    itemPedido.setPedido(pedido);
                    itemPedido.setProduto(produto);
                    itemPedido.setQtdProduto(Integer.parseInt(spnQtd.getValue().toString()));
                    itemPedido.setPrecoVenda(produto.getPreco());
                    try {
                        new ItemPedidoDAO().incluir(itemPedido);
                        carregarTabelaItemPedido();
                        btAddProduto.setEnabled(false);
                        JOptionPane.showMessageDialog((Frame) getParent(), "Item adicionado com sucesso!");
                        consultarProduto.dispose();
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível adicionar o item no pedido!\n"
                                + "<html><b>" + e.getClass() + "</html></b>"
                                + "\nContate o desenvolvedor!", "Erro ao adicionar item", JOptionPane.ERROR_MESSAGE);
                    }
                }
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }//GEN-LAST:event_btAddProdutoMouseClicked

    private void btCancelarProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCancelarProdutoMouseClicked
        btCancelarProduto.setSelected(false);
        consultarProduto.dispose();
    }//GEN-LAST:event_btCancelarProdutoMouseClicked

    private void tabelaProdutoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProdutoMousePressed
        if (tabelaProduto.getSelectedRow() != -1 && !btAddProduto.isEnabled()) {
            btAddProduto.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaProdutoMousePressed

    private void txtLoginFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoginFocusGained
        txtLogin.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtLoginFocusGained

    private void txtLoginKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLoginKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btConfirmaMouseClicked(null);
        }
    }//GEN-LAST:event_txtLoginKeyPressed

    private void txtSenhaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSenhaFocusGained
        txtSenha.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtSenhaFocusGained

    private void txtSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSenhaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btConfirmaMouseClicked(null);
        }
    }//GEN-LAST:event_txtSenhaKeyPressed

    private void btConfirmaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btConfirmaMouseClicked
        String login = txtLogin.getText().trim();
        String senha = txtSenha.getText();
        if (!login.isEmpty() && !senha.isEmpty()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            FuncionarioDAO funcionarioDAO = new FuncionarioDAO();
            Funcionario funcionario = funcionarioDAO.validarLogin(login, senha);
            if (funcionario != null && funcionario.getStatus()) {
                ItemPedidoDAO itemPedidoDAO = new ItemPedidoDAO();
                int linha = tabelaItemPedido.getSelectedRow();
                ItemPedido itemPedido = itemPedidoDAO
                        .consultarPorCodigo(Integer
                                .parseInt(tabelaItemPedido
                                        .getValueAt(linha, 0)
                                        .toString()));
                removerItem(itemPedido);
                confirmarGerente.dispose();
            } else {
                JOptionPane.showMessageDialog((Frame) getParent(), "Login ou senha inválidos!");
            }
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btConfirmaMouseClicked

    private void btCancelar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCancelar1MouseClicked
        confirmarGerente.dispose();
    }//GEN-LAST:event_btCancelar1MouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        btCancelarMouseClicked(null);
    }//GEN-LAST:event_formWindowClosing

    private void btCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCancelarMouseClicked
        if (JOptionPane.showConfirmDialog((Frame) getParent(), "Deseja realmente cancelar?", "Cancelar", 0) == 0) {
            dispose();
        }
    }//GEN-LAST:event_btCancelarMouseClicked

    private void btGerarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btGerarMouseClicked
        if (btGerar.isEnabled()) {
            if (clienteSelecionado != null && !txtComanda.getText().isEmpty()) {
                if (JOptionPane.showConfirmDialog((Frame) getParent(), "Deseja abrir um novo pedido?",
                        "Novo pedido", JOptionPane.YES_NO_OPTION) == 0) {
                    Pedido pedAtvCmd = new PedidoDAO().consultarPedidoAtivoPorComanda(Integer.parseInt(txtComanda.getText()));
                    if (pedAtvCmd == null) {
                        abrirPedido();
                    } else {
                        JOptionPane.showMessageDialog((Frame) getParent(), "Essa comanda já está em uso no momento!\n"
                                + "Informe outra comanda que não esteja em uso para abrir um novo pedido!");
                    }
                }
            } else {
                if (clienteSelecionado == null) {
                    txtCliente.setBackground(new Color(255, 155, 155));
                }
                if (txtComanda.getText().isEmpty()) {
                    txtComanda.setBackground(new Color(255, 155, 155));
                }
                JOptionPane.showMessageDialog((Frame) getParent(), "Preencha os campos em vermelho "
                        + "para abrir um novo pedido!");
            }
        }
    }//GEN-LAST:event_btGerarMouseClicked

    private void consultarProdutoWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_consultarProdutoWindowClosed
        btAddProduto.setEnabled(false);
    }//GEN-LAST:event_consultarProdutoWindowClosed

    private void abrirPedido() {
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        pedido = new Pedido();
        pedido.setComanda(Integer.parseInt(txtComanda.getText()));
        pedido.setCliente(clienteSelecionado);
        pedido.setDtPedido(new Date());
        pedido.setObs(txtObs.getText().trim());
        pedido.setStatus(true);
        try {
            new PedidoDAO().incluir(pedido);
            JOptionPane.showMessageDialog((Frame) getParent(), "Pedido aberto com sucesso!", "Pedido", JOptionPane.PLAIN_MESSAGE);
            btCliente.setEnabled(false);
            pedido = new PedidoDAO().consultarPedidoAtivoPorComanda(Integer.parseInt(txtComanda.getText()));
            limpar();
            txtComanda.setText(pedido.getComanda().toString());
            txtCliente.setText(pedido.getCliente().getNomeCliente());
            txtObs.setText(pedido.getObs());
            carregarTabelaItemPedido();
            clienteSelecionado = pedido.getCliente();
            btAdicionar.setEnabled(true);
            btRemover.setEnabled(false);
            btAlterar.setEnabled(true);
            btGerar.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível abrir o pedido!\n"
                    + "<html><b>" + e.getClass() + "</html></b>"
                    + "\nContate o desenvolvedor!", "Erro ao abrir pedido", JOptionPane.ERROR_MESSAGE);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    private void removerItem(ItemPedido itemPedido) {
        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            new ItemPedidoDAO().excluir(itemPedido);
            carregarTabelaItemPedido();
            JOptionPane.showMessageDialog((Frame) getParent(), "Item removido com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível remover o item do pedido!\n"
                    + "<html><b>" + e.getClass() + "</html></b>"
                    + "\nContate o desenvolvedor!", "Erro ao remover item", JOptionPane.ERROR_MESSAGE);
        } finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void consultarCliente() {
        String[] colunas = new String[]{"Código", "Nome", "CPF", "RG", "Dt. Nascimento",
            "Telefone", "Celular", "Email", "Endereço",
            "Número", "Bairro", "Complemento", "Cidade", "Estado", "CEP"};
        setModeloTabela(tabelaCliente, colunas);
        if (!txtConsultaCliente.getText().isEmpty()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            ClienteDAO clienteDAO = new ClienteDAO();
            String busca = txtConsultaCliente.getText();
            tabelaCliente.getParent().setBackground(new java.awt.Color(233, 232, 230));
            List<Cliente> clientes = new ArrayList<>();
            if (cbFiltroCliente.getSelectedIndex() == 0) {
                try {
                    Cliente c = clienteDAO.consultarPorCodigo(Integer.parseInt(busca));
                    if (c != null) {
                        clientes.add(c);
                    }
                } catch (NumberFormatException erro) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Digite apenas números para o Código!");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível realizar a busca!");
                }
            } else if (cbFiltroCliente.getSelectedIndex() == 1) {
                try {
                    clientes = clienteDAO.consultarPorNome(busca);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível realizar a busca!");
                }
            } else {
                try {
                    Cliente c = clienteDAO.consultarPorCpf(busca);
                    if (c != null) {
                        clientes.add(c);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível realizar a busca!");
                }
            }
            carregarTabelaCliente(clientes);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void consultarProduto() {
        if (!txtConsultaProduto.getText().isEmpty()) {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            ProdutoDAO produtoDAO = new ProdutoDAO();
            String busca = txtConsultaProduto.getText();
            List<Produto> produtos = new ArrayList<>();
            if (cbFiltroProduto.getSelectedIndex() == 0) {
                try {
                    Produto p = produtoDAO.consultarPorCodigo(Integer.parseInt(busca), true);
                    if (p != null) {
                        produtos.add(p);
                    }
                } catch (NumberFormatException erro) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Digite apenas números para o Código!");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível realizar a busca!");
                }
            } else {
                try {
                    produtos = produtoDAO.consultarPorNome(busca, true);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog((Frame) getParent(), "Não foi possível realizar a busca!");
                }
            }
            carregarTabelaProduto(produtos);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void setModeloTabela(JTable tabela, String[] colunas) {
        int lgt = colunas.length;
        boolean[] canEdit = new boolean[lgt];
        for (int i = 0; i < lgt; i++) {
            canEdit[i] = false;
        }
        DefaultTableModel modelo = new DefaultTableModel(null, colunas) {

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tabela.setModel(modelo);
        tabela.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabela.getParent().setBackground(new java.awt.Color(233, 232, 230));
    }

    private void carregarTabelaProduto(List<Produto> produtos) {
        String[] colunas = new String[]{"Código", "Nome", "Categoria", "Preço",
            "Fornecedor"};
        setModeloTabela(tabelaProduto, colunas);
        tabelaProduto.getColumnModel().getColumn(0).setPreferredWidth(73);
        tabelaProduto.getColumnModel().getColumn(1).setPreferredWidth(150);
        tabelaProduto.getColumnModel().getColumn(2).setPreferredWidth(100);
        tabelaProduto.getColumnModel().getColumn(3).setPreferredWidth(75);
        tabelaProduto.getColumnModel().getColumn(4).setPreferredWidth(83);
        DefaultTableModel modelo = (DefaultTableModel) tabelaProduto.getModel();
        Date nasc = clienteSelecionado.getDtNasc();
        int idade = Period.between(LocalDate.of(nasc.getYear() + 1900, nasc.getMonth() + 1, nasc.getDate()), LocalDate.now()).getYears();
        System.out.println(idade);
        for (Produto p : produtos) {
            Object[] linha = new Object[]{
                p.getPkProduto(),
                p.getNomeProduto(),
                p.getCategoria().getNomeCategoria(),
                p.getPreco().toString().replace('.', ','),
                p.getFornecedor()
            };
            if (idade >= 18) {
                modelo.addRow(linha);
            } else if (p.getCategoria().getTipo().equals("Bebida")) {
                if (!p.getCategoria().getControleVenda()) {
                    modelo.addRow(linha);
                }
            } else {
                modelo.addRow(linha);
            }
        }
    }

    private void carregarTabelaItemPedido() {
        List<ItemPedido> itensPedido = new ItemPedidoDAO().consultarPorPedido(pedido.getPkPedido());
        String[] colunas = new String[]{
            "Código", "Produto", "Quantidade", "Valor Unitário"
        };
        setModeloTabela(tabelaItemPedido, colunas);
        tabelaItemPedido.getColumnModel().getColumn(0).setPreferredWidth(73);
        tabelaItemPedido.getColumnModel().getColumn(1).setPreferredWidth(373);
        tabelaItemPedido.getColumnModel().getColumn(2).setPreferredWidth(100);
        tabelaItemPedido.getColumnModel().getColumn(3).setPreferredWidth(100);
        DefaultTableModel modelo = (DefaultTableModel) tabelaItemPedido.getModel();
        DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        tabelaItemPedido.getColumnModel().getColumn(2).setCellRenderer(direita);
        tabelaItemPedido.getColumnModel().getColumn(3).setCellRenderer(direita);
        float total = 0;
        for (ItemPedido i : itensPedido) {
            Object[] linha = new Object[]{
                i.getPkItemPedido(),
                i.getProduto().getNomeProduto(),
                i.getQtdProduto(),
                new java.text.DecimalFormat("#,##0.00").format(i.getPrecoVenda())
            };
            modelo.addRow(linha);
            total = total + i.getPrecoVenda() * i.getQtdProduto();
        }
        txtTotal.setValue(total);
    }

    private void carregarTabelaCliente(List<Cliente> clientes) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaCliente.getModel();
        for (Cliente c : clientes) {
            Object[] linha = new Object[]{
                c.getPkCliente(),
                c.getNomeCliente(),
                c.getCpf(),
                c.getRg(),
                c.getDtNasc(),
                c.getTelefone(),
                c.getCelular(),
                c.getEmail(),
                c.getEndereco(),
                c.getNum(),
                c.getBairro(),
                c.getComplemento(),
                c.getCidade(),
                c.getEstado(),
                c.getCep()
            };
            modelo.addRow(linha);
        }
    }

    private void limpar() {
        txtComanda.setBackground(new Color(255, 255, 255));
        txtCliente.setBackground(new Color(255, 255, 255));

        ((AbstractDocument) txtComanda.getDocument()).setDocumentFilter(new DocumentFilter());
        txtComanda.setText(null);
        ((AbstractDocument) txtComanda.getDocument()).setDocumentFilter(new NumeroValidator(10, txtComanda));

        txtCliente.setText(null);
        txtObs.setText(null);
        txtTotal.setValue(0);
    }

    private void setUndoableTextArea() {
        menu.add(copiar);
        menu.add(recortar);
        menu.add(colar);
        copiar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                txtObs.copy();
                txtObs.requestFocus();
            }
        });
        recortar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                txtObs.cut();
                txtObs.requestFocus();
            }
        });
        colar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                txtObs.paste();
                txtObs.requestFocus();
            }
        });

        txtObs.getDocument().addUndoableEditListener(manager);
        Action desfazer = new Desfazer(manager);
        Action refazer = new Refazer(manager);

        txtObs.registerKeyboardAction(desfazer, KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_MASK), JComponent.WHEN_FOCUSED);
        txtObs.registerKeyboardAction(refazer, KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_MASK), JComponent.WHEN_FOCUSED);

        txtObs.setComponentPopupMenu(menu);
    }

    private void addEventoTeclaAtalho() {
        InputMap inputMap = this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "Consultar");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Consultar", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btConsultarComanda.doClick();
                btConsultarComandaMouseClicked(null);
            }
        });
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), "Novo");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Novo", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btNovo.doClick();
                btNovoMouseClicked(null);
            }
        });
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0), "Gerar");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Gerar", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btGerar.doClick();
                btGerarMouseClicked(null);
            }
        });
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0), "Alterar");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Alterar", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btAlterar.doClick();
                btAlterarMouseClicked(null);
            }
        });
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F8, 0), "Adicionar");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Adicionar", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btAdicionar.doClick();
                btAdicionarMouseClicked(null);
            }
        });
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F9, 0), "Remover");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Remover", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btRemover.doClick();
                btRemoverMouseClicked(null);
            }
        });
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "Cancelar");
        this.getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);
        this.getRootPane().getActionMap().put("Cancelar", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                btCancelar.doClick();
                btCancelarMouseClicked(null);
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the SmartLookAndFeel look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerarPedido.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerarPedido.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerarPedido.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerarPedido.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GerarPedido dialog = new GerarPedido(new javax.swing.JFrame(), true);
                dialog.setVisible(true);
            }
        });
    }
    JPopupMenu menu = new JPopupMenu();
    JMenuItem copiar = new JMenuItem("Copiar", new ImageIcon(getClass().getResource("/ICON/copiar.png")));
    JMenuItem colar = new JMenuItem("Colar", new ImageIcon(getClass().getResource("/ICON/colar.png")));
    JMenuItem recortar = new JMenuItem("Recortar", new ImageIcon(getClass().getResource("/ICON/recortar.png")));
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddProduto;
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btCancelar1;
    private javax.swing.JButton btCancelarCliente;
    private javax.swing.JToggleButton btCancelarProduto;
    private javax.swing.JButton btCliente;
    private javax.swing.JButton btConfirma;
    private javax.swing.JButton btConsultarCliente;
    private javax.swing.JButton btConsultarComanda;
    private javax.swing.JButton btConsultarProduto;
    private javax.swing.JButton btGerar;
    private javax.swing.JButton btIncluirCliente;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btRemover;
    private javax.swing.JButton btSelecionar;
    private javax.swing.JComboBox<String> cbFiltroCliente;
    private javax.swing.JComboBox<String> cbFiltroProduto;
    private javax.swing.JDialog confirmarGerente;
    private javax.swing.JDialog consultarCliente;
    private javax.swing.JDialog consultarProduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner spnQtd;
    private javax.swing.JTable tabelaCliente;
    private javax.swing.JTable tabelaItemPedido;
    private javax.swing.JTable tabelaProduto;
    private javax.swing.JTextField txtCliente;
    private JTextFieldPersonalizado.JCTextField txtComanda;
    private JTextFieldPersonalizado.JCTextField txtConsultaCliente;
    private JTextFieldPersonalizado.JCTextField txtConsultaProduto;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JPasswordField txtSenha;
    private javax.swing.JFormattedTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
